#!/usr/bin/env python3

import feedparser as fp
import sqlite3
import time
from datetime import datetime, timedelta
import pytz
import os

conn = sqlite3.connect('./rss.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS rss
             (feed string, article_id string)''')

subscriptions = [
  'https://nanxiao.me/en/feed/',
  'https://usesthis.com/feed.atom',
  'http://www.leancrew.com/all-this/feed/',
  'http://brettterpstra.com/atom.xml',
  'http://feedpress.me/sixcolors',
  'https://www.tedunangst.com/flak/rss',
  'http://www.drbunsen.org/feed.xml',
  'https://pxlnv.com/feed',
  'https://www.hillelwayne.com/index.xml',
  'http://austinmann.com/trek?format=RSS',
  'http://macdrifter.com/feeds/all.atom.xml',
  'http://www.norvig.com/rss-feed.xml',
  'http://mattgemmell.com/feed',
  # 'http://www.loopinsight.com/feed/',
  'http://omgchrome.com/feed',
  'http://feeds2.feedburner.com/pugetsystems_all',
  'http://randsinrepose.com/feed/',
  'http://david-smith.org/atom.xml',
  'http://feedpress.me/birchtree',
  'https://512pixels.net/feed/',
  'http://feeds.feedburner.com/37signals/beMH',
  'http://xkcd.com/rss.xml',
  'https://www.blog.google/rss/',
  'http://www.thecramped.com/feed/',
  'http://daringfireball.net/index.xml',
  #'http://mjtsai.com/blog/feed/',
  'http://thesweetsetup.com/feed/',
  'http://feeds.feedburner.com/InformationArchitectsJapan',
  'https://om.co/feed/',
  'https://blog.lessonslearned.org/rss/',
  'http://feeds.feedburner.com/macstoriesnet',
  'http://praeclarum.org/rss',
  'http://feeds.feedburner.com/codinghorror/',
  'http://blog.mozilla.com/feed/',
  'http://www.johnnypatience.com/feed/',
  'https://www.fs.blog/feed/',
  'http://macwright.org/atom.xml',
  'http://www.marco.org/rss',
  'https://fedoramagazine.org/feed/',
  'https://www.justinobeirne.com/rss?format=rss',
  'https://bartongeorge.io/feed/',
  'http://feeds.feedburner.com/craigmod/',
  'http://feeds.feedburner.com/BenjaminMayo',
  'http://feeds.feedburner.com/GiantRobotsSmashingIntoOtherGiantRobots',
  'http://sivers.org/en.atom',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCvsh_dI2wzjzsl_Y_sI4Txw',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCVYamHliCI9rw1tHR1xbkfw',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCdyTmTQTyGA2I7mMBODzqig',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCjB81tcYrS2eIJs452EThwg',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCM-Jj3DGtBDdQ8GB2oQnGUw',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCvWWf-LYjaujE50iYai8WgQ',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCkWQ0gDrqOCarmUKmppD7GQ',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCaJDcjxkg5YSTLWwxIUMsxA',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UC4w1YQAJMWOz4qtxinq55LQ',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCkJ1Sgtqj909kXj_kApY3rA',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCJ24N4O0bP7LGLBDvye7oCA',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCftcLVz-jtPXoH3cWUUDwYw',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCOWcZ6Wicl-1N34H0zZe38w',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCG98giOsUxIlXV0rNUhxLew',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCZdQjaSoLjIzFnWsDQOv4ww',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCLTU1O0KOYY_QKw23uj5ddQ',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCtZRKfyvx7GUEi-Lr7f4Nxg',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UCyKV3Zl7AKVj7ikyOlcfZTQ',
  # 'https://www.youtube.com/feeds/videos.xml?channel_id=UChIs72whgZI9w6d6FhwGGHA'
  ]

# Date and time
utc = pytz.utc
homeTZ = pytz.timezone('US/Eastern')
dt = datetime.now(homeTZ)
if dt.hour < 2:
  dt = dt - timedelta(hours=24)
start = dt.replace(hour=0, minute=0, second=0, microsecond=0)
start = start.astimezone(utc)
# try:
#   lastrun = os.path.getmtime('./rss.html')
#   lastrun = utc.localize(datetime.fromtimestamp(lastrun))
# except:
#   lastrun = start

# Collect all of today's or unprocessed posts
# and put them in a list of tuples.
posts = []
for s in subscriptions:
  f = fp.parse(s)
  try:
    blog = f['feed']['title']
  except KeyError:
    continue
  for e in f['entries']:
    # get time of entry
    try:
        when = e['published_parsed']
    except KeyError:
      when = e['updated_parsed']
    when =  utc.localize(datetime.fromtimestamp(time.mktime(when)))
    # check if entry is in db
    c.execute("SELECT count(*) FROM rss WHERE article_id = ?", (e['guid'],))
    data = c.fetchone()[0]
    if data == 0 or when > start:
      title = e['title']
      try:
        body = e['content'][0]['value']
      except KeyError:
        body = e['summary']
      link = e['link']
      posts.append((when, blog, title, link, body))
      if data == 0:
        c.execute("INSERT INTO rss VALUES (?, ?)", (blog, e['guid']))

# Sort the posts in reverse chronological order.
posts.sort()
posts.reverse()

# Turn them into an HTML list.
listTemplate = '''<li>
  <p class="title"><a href="{3}">{2}</a></p>
  <p class="info">{1}<br />{0}</p>
  <p>{4}</p>\n</li>'''
litems = []
for p in posts:
  #q = [ x.encode('utf8') for x in p[1:] ]
  q = [ x for x in p[1:] ]
  timestamp = p[0].astimezone(homeTZ)
  q.insert(0, timestamp.strftime('%b %d, %Y %I:%M %p'))
  litems.append(listTemplate.format(*q))
ul = '\n<hr />\n'.join(litems)

conn.commit()
conn.close()

# Print the HTMl.
html = '''<html>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<head>
<style>
html{{
    background-color:#fefefe
}}
body{{
    font-family:sans-serif;
    color:#454545;
    font-size:16px;
    margin:auto;
    max-width:800px;
    padding:1em;
    line-height:1.4;
    text-align:justify
}}
a{{
    color:#07a
}}
a:visited{{
    color:#941352
}}
.rss {{
  list-style-type: none;
  margin: 0;
  padding: .5em 1em 1em 1.5em;
  background-color: white;
}}
.rss li {{
  margin-left: -.5em;
  line-height: 1.4;
}}
.rss li pre {{
  overflow: auto;
}}
.rss li p {{
  overflow-wrap: break-word;
  word-wrap: break-word;
  word-break: break-word;
  -webkit-hyphens: auto;
  hyphens: auto;
}}
.title {{
  font-weight: bold;
  font-family: Helvetica, Sans-serif;
  font-size: 110%;
  margin-bottom: .25em;
}}
.title a {{
  text-decoration: none;
  color: black;
}}
.info {{
  font-size: 85%;
  margin-top: 0;
  margin-left: .5em;
}}
img {{
  max-width: 700px;
}}
@media screen and (max-width:500px){{
    body{{
        text-align:left
    }}
}}
@media screen and (max-width:667px) {{
  body {{
    font-size: 200%;
    width: 650px;
    background-color: white;
  }}
  .rss li {{
    line-height: normal;
  }}
  img {{
    max-width: 600px;
  }}
}}
</style>
<title>Today's RSS</title>
<body>
<ul class="rss">
{}
</ul>
</body>
</html>
'''.format(ul)

with open('rss.html', 'w+', encoding='utf-8') as f:
  f.write(html)