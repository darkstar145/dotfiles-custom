#!/usr/bin/python

import sys
import re

decimal = re.compile(r'^( -?[0-9,]*)\.(\d* )$')
integer = re.compile(r'^( -?[0-9,]+) $')

def just(string, type, n, b, d):
  "Justify a string to length n according to type."
  
  if type == '::':
    return string.center(n)
  elif type == '-:':
    return string.rjust(n)
  elif type == ':-':
    return string.ljust(n)
  elif type == '..':
    isdec = decimal.search(string)
    isint = integer.search(string)
    if isdec:
      before = len(isdec.group(1))
      after = len(isdec.group(2))
      string = ' ' * (b - before) + string + ' ' * (d - after)
    elif isint:
      before = len(isint.group(1))
      string = ' ' * (b - before) + string + ' ' * d
    return string.center(n)
  else:
    return string


def normtable(text):
  "Aligns the vertical bars in a text table."
  
  # Start by turning the text into a list of lines.
  lines = text.splitlines()
  rows = len(lines)
  
  # Figure out the cell formatting.
  # First, find the separator line.
  for i in range(rows):
    if set(lines[i]).issubset('|:.- '):
      formatline = lines[i]
      formatrow = i
      break
  
  # Delete the separator line from the content.
  del lines[formatrow]
  
  # Determine how each column is to be justified.
  formatline = formatline.strip(' ')
  if formatline[0] == '|': formatline = formatline[1:]
  if formatline[-1] == '|': formatline = formatline[:-1]
  fstrings = formatline.split('|')
  justify = []
  for cell in fstrings:
    ends = cell[0] + cell[-1]
    if ends in ['::', ':-', '-:', '..']:
      justify.append(ends)
    else:
      justify.append(':-')
  
  # Assume the number of columns in the separator line is the number
  # for the entire table.
  columns = len(justify)
  
  # Extract the content into a matrix.
  content = []
  for line in lines:
    line = line.strip(' ')
    if line[0] == '|': line = line[1:]
    if line[-1] == '|': line = line[:-1]
    cells = line.split('|')
    # Put exactly one space at each end as "bumpers."
    linecontent = [ ' ' + x.strip() + ' ' for x in cells ]
    content.append(linecontent)
  
  # Append cells to rows that don't have enough.
  rows = len(content)
  for i in range(rows):
    while len(content[i]) < columns:
      content[i].append('')
  
  # Get the width of the content in each column. The minimum width will
  # be 2, because that's the shortest length of a formatting string and
  # because that matches an empty column with "bumper" spaces.
  widths = [2] * columns
  beforedots = [0] * columns
  afterdots = [0] * columns
  for row in content:
    for i in range(columns):
      isdec = decimal.search(row[i])
      isint = integer.search(row[i])
      if isdec:
        beforedots[i] = max(len(isdec.group(1)), beforedots[i])
        afterdots[i] = max(len(isdec.group(2)), afterdots[i])
      elif isint:
        beforedots[i] = max(len(isint.group(1)), beforedots[i])
      widths[i] = max(len(row[i]), beforedots[i] + afterdots[i] + 1, widths[i])
      
  # Add whitespace to make all the columns the same width. 
  formatted = []
  for row in content:
    formatted.append('|' + '|'.join([ just(s, t, n, b, d) for (s, t, n, b, d) in zip(row, justify, widths, beforedots, afterdots) ]) + '|')
  
  # Recreate the format line with the appropriate column widths.
  formatline = '|' + '|'.join([ s[0] + '-'*(n-2) + s[-1] for (s, n) in zip(justify, widths) ]) + '|'
  formatline = re.sub(".-",":-",formatline)
  formatline = re.sub("-.","--",formatline)
  
  # Insert the formatline back into the table.
  formatted.insert(formatrow, formatline)
  
  # Return the formatted table.
  return '\n'.join(formatted)

        
# Read the input, process, and print.
unformatted = unicode(sys.stdin.read(), "utf-8")
print normtable(unformatted)